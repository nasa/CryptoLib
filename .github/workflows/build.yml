name: CryptoLib

on: 
  pull_request:
    branches: [ main, dev ]

jobs:
  #
  # Minimal Build
  #
  minimal_build:
    # Container Setup
    runs-on: ubuntu-latest
    container:
        image: ivvitc/cryptolib:20240814
    steps:
    - uses: actions/checkout@v4
    - name: Update
      run: apt-get update
    - name: Install Dependencies
      run: apt-get install -y lcov libcurl4-openssl-dev libmariadb-dev libmariadb-dev-compat python3
    - name: Install Python Libraries
      run: pip install pycryptodome
    - name: Install Libgcrypt
      run: >
        curl  
        -LS https://www.gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.50.tar.bz2 
        -o /tmp/libgpg-error-1.50.tar.bz2 
        && tar -xjf /tmp/libgpg-error-1.50.tar.bz2 -C /tmp/ 
        && cd /tmp/libgpg-error-1.50 
        && ./configure 
        && make install 
        && curl  
        -LS https://www.gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.11.0.tar.bz2 
        -o /tmp/libgcrypt-1.11.0.tar.bz2 
        && tar -xjf /tmp/libgcrypt-1.11.0.tar.bz2 -C /tmp/ 
        && cd /tmp/libgcrypt-1.11.0 
        && ./configure 
        && make install
        && ldconfig
    # End Container Setup
    
    - name: Minimal Build Script
      working-directory: ${{github.workspace}}
      run: bash ${GITHUB_WORKSPACE}/support/scripts/build_minimal.sh

  #
  # Internal Build
  #
  internal_build:
    # Container Setup
    runs-on: ubuntu-latest
    container:
        image: ivvitc/cryptolib:20240814
    steps:
    - uses: actions/checkout@v4
    - name: Update
      run: apt-get update
    - name: Install Dependencies
      run: apt-get install -y lcov libcurl4-openssl-dev libmariadb-dev libmariadb-dev-compat python3
    - name: Install Python Libraries
      run: pip install pycryptodome
    - name: Install Libgcrypt
      run: >
        curl  
        -LS https://www.gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.50.tar.bz2 
        -o /tmp/libgpg-error-1.50.tar.bz2 
        && tar -xjf /tmp/libgpg-error-1.50.tar.bz2 -C /tmp/ 
        && cd /tmp/libgpg-error-1.50 
        && ./configure 
        && make install 
        && curl  
        -LS https://www.gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.11.0.tar.bz2 
        -o /tmp/libgcrypt-1.11.0.tar.bz2 
        && tar -xjf /tmp/libgcrypt-1.11.0.tar.bz2 -C /tmp/ 
        && cd /tmp/libgcrypt-1.11.0 
        && ./configure 
        && make install
        && ldconfig
    # End Container Setup
    
    - name: Internal Build Script
      working-directory: ${{github.workspace}}
      run: bash ${GITHUB_WORKSPACE}/support/scripts/build_internal.sh

    - name: Code-Coverage
      working-directory: ${{github.workspace}}
      run: make gcov

    - name: Upload 
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: 71699f25-12a3-44a4-8a83-be777b9e577a
      with:
        files: 'coverage/*.c.gcov'
        verbose: true

  #
  # KMC Build
  #
  # kmc_build:
  #   # Container Setup
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Update
  #     run: sudo apt-get update
  #   - name: Install Dependencies
  #     run: sudo apt-get install -y lcov libcurl4-openssl-dev libmariadb-dev libmariadb-dev-compat python3
  #   - name: Install Python Libraries
  #     run: sudo pip install pycryptodome
  #   - name: Install Libgcrypt
  #     run: >
  #       curl  
  #       -LS https://www.gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.50.tar.bz2 
  #       -o /tmp/libgpg-error-1.50.tar.bz2 
  #       && tar -xjf /tmp/libgpg-error-1.50.tar.bz2 -C /tmp/ 
  #       && cd /tmp/libgpg-error-1.50 
  #       && sudo ./configure 
  #       && sudo make install 
  #       && curl  
  #       -LS https://www.gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.11.0.tar.bz2 
  #       -o /tmp/libgcrypt-1.11.0.tar.bz2 
  #       && tar -xjf /tmp/libgcrypt-1.11.0.tar.bz2 -C /tmp/ 
  #       && cd /tmp/libgcrypt-1.11.0 
  #       && sudo ./configure 
  #       && sudo make install
  #       && sudo ldconfig
  #   # End Container Setup
    
  #   - name: KMC Build Script
  #     working-directory: ${{github.workspace}}
  #     run: bash ${GITHUB_WORKSPACE}/support/scripts/build_kmc.sh
    
  #   - name: Code-Coverage
  #     working-directory: ${{github.workspace}}
  #     run: make gcov

  #   - name: Upload 
  #     uses: codecov/codecov-action@v4
  #     env:
  #       CODECOV_TOKEN: 71699f25-12a3-44a4-8a83-be777b9e577a
  #     with:
  #       files: 'coverage/*.c.gcov'
  #       verbose: true

  #
  # Wolf Build
  #
  wolf_build:
    # Container Setup
    runs-on: ubuntu-latest
    container:
        image: ivvitc/cryptolib:20240814
    steps:
    - uses: actions/checkout@v4
    - name: Update
      run: apt-get update
    - name: Install Dependencies
      run: apt-get install -y lcov libcurl4-openssl-dev libmariadb-dev libmariadb-dev-compat python3 autoconf libtool
    - name: Install Python Libraries
      run: pip install pycryptodome
    - name: Install Libgcrypt
      run: >
        curl  
        -LS https://www.gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.50.tar.bz2 
        -o /tmp/libgpg-error-1.50.tar.bz2 
        && tar -xjf /tmp/libgpg-error-1.50.tar.bz2 -C /tmp/ 
        && cd /tmp/libgpg-error-1.50 
        && ./configure 
        && make install 
        && curl  
        -LS https://www.gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.11.0.tar.bz2 
        -o /tmp/libgcrypt-1.11.0.tar.bz2 
        && tar -xjf /tmp/libgcrypt-1.11.0.tar.bz2 -C /tmp/ 
        && cd /tmp/libgcrypt-1.11.0 
        && ./configure 
        && make install
        && ldconfig
    - name: Clone WolfSSL
      run: git clone --depth 1 --branch v5.6.0-stable https://github.com/wolfSSL/wolfssl.git /tmp/wolfssl
   
     #      cmake -DCMAKE_INSTALL_PREFIX=/home/runner/.local -DWOLFSSL_AESCCM=yes -DWOLFSSL_AESSIV=yes -DWOLFSSL_CMAC=yes ..;
    - name: Build WolfSSL
      #  -DCMAKE_INSTALL_PREFIX=/home/runner/.local
      #run: cd /tmp/wolfssl/;
      #     sudo chown -R runner /usr/local; 
      #     ./autogen.sh;
      #     sudo ./configure --enable-aesccm --enable-aessiv --enable-cmac;
      #     make;
      #     make install;
      #sudo chown -R runner /usr/local;
      run: mkdir /tmp/wolfssl/build;
           cd /tmp/wolfssl/build;
           cmake -DWOLFSSL_AESCCM=yes -DWOLFSSL_AESSIV=yes -DWOLFSSL_CMAC=yes ..;
           cmake --build .;
           make install;
           ldconfig;
    # End Container Setup
    
    - name: Wolf Build Script
      working-directory: ${{github.workspace}}
      run: bash ${GITHUB_WORKSPACE}/support/scripts/build_wolf.sh
    
    - name: Code-Coverage
      working-directory: ${{github.workspace}}
      run: make gcov

    - name: Upload 
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: 71699f25-12a3-44a4-8a83-be777b9e577a
      with:
        files: 'coverage/*.c.gcov'
        verbose: true
      
  #
  # RHEL Build
  #
  rhel_build:
    # Container Setup
    runs-on: ubuntu-latest
    container:
      image: rockylinux/rockylinux:9
    steps:
    - uses: actions/checkout@v4
    - name: Update
      run: yum update -y
    - name: Install Dependencies
      run: yum install -y --enablerepo=devel python3-pip python3-devel epel-release libcurl-devel git cmake gcc java-11-openjdk-devel openssl wget bzip2 ldconfig mariadb-devel mariadb-common mariadb-connector-c mariadb-connector-c-config mariadb-errmsg mariadb-gssapi-server
      # Might want to trim this down, but these dependencies should work for KMC
    - name: install lcov
      run: yum install -y --enablerepo=epel lcov
    - name: install lcov
      run: python3 -m pip install pycryptodome
    - name: Install Libgcrypt
      run: >
        curl 
        -LS https://www.gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.50.tar.bz2 
        -o /tmp/libgpg-error-1.50.tar.bz2 
        && tar -xjf /tmp/libgpg-error-1.50.tar.bz2 -C /tmp/ 
        && cd /tmp/libgpg-error-1.50 
        && ./configure 
        && make install 
        && curl  
        -LS https://www.gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.11.0.tar.bz2 
        -o /tmp/libgcrypt-1.11.0.tar.bz2 
        && tar -xjf /tmp/libgcrypt-1.11.0.tar.bz2 -C /tmp/ 
        && cd /tmp/libgcrypt-1.11.0 
        && ./configure 
        && make install  
        && echo "export LD_LIBRARY_PATH=/usr/local/lib/:/usr/local/include:$LD_LIBRARY_PATH" >> ~/.bashrc 
        && source ~/.bashrc 
        && ldconfig
    # End Container Setup

    - name: RHEL Build Script
      working-directory: ${{github.workspace}}
      run: source ~/.bashrc && ${GITHUB_WORKSPACE}/support/scripts/build_rhel.sh
    
    - name: Code-Coverage
      working-directory: ${{github.workspace}}
      run: source ~/.bashrc && make gcov

    - name: Upload 
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: 71699f25-12a3-44a4-8a83-be777b9e577a
      with:
        files: 'coverage/*.c.gcov'
        verbose: true

  #
  # Ext. Proc. Build
  #
  EP_build:
    # Container Setup
    runs-on: ubuntu-latest
    container:
        image: ivvitc/cryptolib:20240814
    steps:
    - uses: actions/checkout@v4
    - name: Update
      run: apt-get update
    - name: Install Dependencies
      run: apt-get install -y lcov libcurl4-openssl-dev libmariadb-dev libmariadb-dev-compat python3
    - name: Install Python Libraries
      run: pip install pycryptodome
    - name: Install Libgcrypt
      run: >
        curl  
        -LS https://www.gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.50.tar.bz2 
        -o /tmp/libgpg-error-1.50.tar.bz2 
        && tar -xjf /tmp/libgpg-error-1.50.tar.bz2 -C /tmp/ 
        && cd /tmp/libgpg-error-1.50 
        && ./configure 
        && make install 
        && curl  
        -LS https://www.gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.11.0.tar.bz2 
        -o /tmp/libgcrypt-1.11.0.tar.bz2 
        && tar -xjf /tmp/libgcrypt-1.11.0.tar.bz2 -C /tmp/ 
        && cd /tmp/libgcrypt-1.11.0 
        && ./configure 
        && make install
        && ldconfig
    # End Container Setup
    
    - name: Internal Build Script
      working-directory: ${{github.workspace}}
      run: bash ${GITHUB_WORKSPACE}/support/scripts/build_ep.sh

    - name: Code-Coverage
      working-directory: ${{github.workspace}}
      run: make gcov

    - name: Upload 
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: 71699f25-12a3-44a4-8a83-be777b9e577a
      with:
        files: 'coverage/*.c.gcov'
        verbose: true
