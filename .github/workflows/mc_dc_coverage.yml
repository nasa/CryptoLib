name: CryptoLib Coverage

on:
  push:
    branches:
      - 258-cyclomatic-complexity-and-mcdc-in-ci
  pull_request:
    branches:
      - 258-cyclomatic-complexity-and-mcdc-in-ci

jobs:
  coverage:
    runs-on: ubuntu-latest
    container:
      image: ivvitc/cryptolib:20240814

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
        TZ: Etc/UTC
      run: |
        apt-get update
        apt-get install -y lcov libcurl4-openssl-dev libmariadb-dev libmariadb-dev-compat python3 gcovr
        pip install pycryptodome
        # Install Libgcrypt
        curl -LS https://www.gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.50.tar.bz2 -o /tmp/libgpg-error-1.50.tar.bz2
        tar -xjf /tmp/libgpg-error-1.50.tar.bz2 -C /tmp/
        cd /tmp/libgpg-error-1.50 && ./configure && make install
        curl -LS https://www.gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.11.0.tar.bz2 -o /tmp/libgcrypt-1.11.0.tar.bz2
        tar -xjf /tmp/libgcrypt-1.11.0.tar.bz2 -C /tmp/
        cd /tmp/libgcrypt-1.11.0 && ./configure && make install
        ldconfig

    # Build with coverage instrumentation
    - name: Internal Build Script
      run: bash ${GITHUB_WORKSPACE}/support/scripts/build_internal.sh

    # Generate consolidated coverage report and badges
    - name: Generate Coverage Report and Badges
      run: |
        mkdir -p coverage
        gcovr --branches --xml-pretty --exclude-unreachable-branches -o coverage/coverage_report.xml
        gcovr --branches --html --html-details -o coverage/coverage_report.html

        # Extract coverage metrics
        LINE_COVERAGE=$(grep 'line-rate' coverage/coverage_report.xml | sed -n 's/.*line-rate="\(.*\)".*/\1/p')
        BRANCH_COVERAGE=$(grep 'branch-rate' coverage/coverage_report.xml | sed -n 's/.*branch-rate="\(.*\)".*/\1/p')
        LINE_COVERAGE_PERCENT=$(awk "BEGIN {print int($LINE_COVERAGE * 100)}")
        BRANCH_COVERAGE_PERCENT=$(awk "BEGIN {print int($BRANCH_COVERAGE * 100)}")

        # Generate badges
        curl -o coverage/line-coverage-badge.svg "https://img.shields.io/badge/line%20coverage-${LINE_COVERAGE_PERCENT}%25-brightgreen"
        curl -o coverage/branch-coverage-badge.svg "https://img.shields.io/badge/branch%20coverage-${BRANCH_COVERAGE_PERCENT}%25-brightgreen"

    # Commit badges to a separate branch
    - name: Commit Coverage Badges
      if: ${{ github.event_name == 'push' }}
      run: |
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git checkout -b badges || git checkout badges
        git add coverage/line-coverage-badge.svg
        git add coverage/branch-coverage-badge.svg
        git commit -m "Update coverage badges"
        git push origin badges

    # Upload consolidated coverage report as an artifact
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage

