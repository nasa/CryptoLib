name: CryptoLib Coverage with MC/DC

on:
  push:
    branches:
      - 258-cyclomatic-complexity-and-mcdc-in-ci
    paths-ignore:
      - 'doc/coverage/*.svg'
  pull_request:
    branches:
      - 258-cyclomatic-complexity-and-mcdc-in-ci

jobs:
  coverage:
    runs-on: ubuntu-latest
    container:
      image: ivvitc/cryptolib:20240814  # Replace with your container if applicable

    steps:
    # Step 1: Check out the repository
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for branch operations

    # Step 2: Configure Git safe directory
    - name: Configure Safe Directory
      run: git config --global --add safe.directory $GITHUB_WORKSPACE

    # Step 3: Install dependencies
    - name: Install Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
        TZ: Etc/UTC
      run: |
        apt-get update
        apt-get install -y gcc g++ gcovr lcov libcurl4-openssl-dev libmariadb-dev libmariadb-dev-compat python3 bc tzdata
        pip install pycryptodome
        # Install additional libraries if necessary
        curl -LS https://www.gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.50.tar.bz2 -o /tmp/libgpg-error-1.50.tar.bz2
        tar -xjf /tmp/libgpg-error-1.50.tar.bz2 -C /tmp/
        cd /tmp/libgpg-error-1.50 && ./configure && make install
        curl -LS https://www.gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.11.0.tar.bz2 -o /tmp/libgcrypt-1.11.0.tar.bz2
        tar -xjf /tmp/libgcrypt-1.11.0.tar.bz2 -C /tmp/
        cd /tmp/libgcrypt-1.11.0 && ./configure && make install
        ldconfig

    # Step 4: Build and run tests with instrumentation
    - name: Build and Run Tests with Instrumentation
      run: |
        export CFLAGS="-fprofile-arcs -ftest-coverage -g"
        bash ${GITHUB_WORKSPACE}/support/scripts/build_internal.sh

    # Step 5: Analyze MC/DC coverage with gMCov
    - name: Generate MC/DC Coverage Report
      run: |
        git clone https://github.com/Monika-rani12/gMCov.git /tmp/gmcov
        chmod +x /tmp/gmcov/main-gProfiler.sh
        cd /tmp/gmcov
        ./main-gProfiler.sh
        mv output_mcdc_report ${GITHUB_WORKSPACE}/doc/coverage/

    # Step 6: Upload coverage reports to Codecov
    - name: Upload to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: doc/coverage/output_mcdc_report
        flags: mcdc

    # Step 7: Commit and push coverage report (optional)
    - name: Commit Coverage Report
      run: |
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git add doc/coverage/output_mcdc_report
        git commit -m "Update MC/DC coverage report" || echo "No changes to commit"
        git push origin HEAD

    # Step 8: Upload MC/DC coverage report as an artifact (optional)
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: mcdc-coverage-report
        path: doc/coverage/output_mcdc_report
